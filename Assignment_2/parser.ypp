%{
#include <iostream>
#include <stdio.h>
using namespace std;

int yylex();
void yyerror(char const* msg);
%}

%token KW_PROGRAM
%token KW_BEGIN
%token KW_END
%token KW_FUNCTION
%token KW_READ
%token KW_WRITE
%token KW_IF
%token KW_ELSE
%token KW_FI
%token KW_FOR
%token KW_ROF
%token KW_BREAK
%token KW_CONTINUE
%token KW_RETURN
%token KW_INT
%token KW_VOID
%token KW_STRING
%token KW_FLOAT

%token OP_ASSIGN	/* := */
%token OP_ADD		/* +  */
%token OP_SUB		/* -  */
%token OP_MUL		/* *  */
%token OP_DIV		/* /  */ 
%token OP_EQ		/* =  */
%token OP_NEQ		/* != */
%token OP_LT		/* <  */
%token OP_GT		/* >  */
%token OP_OP		/* (  */
%token OP_CP		/* )  */
%token OP_SEMICOLON	/* ;  */
%token OP_COMMA		/* ,  */
%token OP_LEQ		/* <= */
%token OP_GEQ		/* >= */

%token IDENTIFIER
%token INTLITERAL
%token FLOATLITERAL
%token STRINGLITERAL

%%

/* Program */
program:	 KW_PROGRAM id KW_BEGIN pgm_body KW_END ;
id: 		 IDENTIFIER ;
pgm_body:	 decl func_declarations ;
decl: 		 string_decl decl | var_decl decl | ;

/* Global String Declaration */
string_decl:	 KW_STRING id OP_ASSIGN str OP_SEMICOLON ;
str: 		 STRINGLITERAL ;

/* Variable Declaration */
var_decl: 	 var_type id_list OP_SEMICOLON ;
var_type: 	 KW_FLOAT | KW_INT ;
any_type:	 var_type | KW_VOID ;
id_list: 	 id id_tail ;
id_tail: 	 OP_COMMA id id_tail | ;

/* Function Parameter List */
param_decl_list: param_decl param_decl_tail | ; 
param_decl: 	 var_type id ;
param_decl_tail: OP_COMMA param_decl param_decl_tail | ;

/* Function Declarations */
func_declarations: func_decl func_declarations | ;
func_decl: 	 KW_FUNCTION any_type id OP_OP param_decl_list OP_CP KW_BEGIN func_body KW_END ;
func_body: 	 decl stmt_list ;

/* Statement List */ 
stmt_list: 	 stmt stmt_list | ;
stmt: 		 base_stmt | if_stmt | for_stmt ;
base_stmt: 	 assign_stmt | read_stmt | write_stmt | return_stmt ;

/* Basic Statements */
assign_stmt: 	 assign_expr OP_SEMICOLON ;
assign_expr: 	 id OP_ASSIGN expr ;
read_stmt: 	 KW_READ OP_OP id_list OP_CP OP_SEMICOLON ;
write_stmt: 	 KW_WRITE OP_OP id_list OP_CP OP_SEMICOLON ;
return_stmt: 	 KW_RETURN expr OP_SEMICOLON ;

/* Expressions */
expr: 		 expr_prefix factor ;
expr_prefix: 	 expr_prefix factor addop | ;
factor: 	 factor_prefix postfix_expr ;
factor_prefix:   factor_prefix postfix_expr mulop | ;
postfix_expr: 	 primary | call_expr ;
call_expr:	 id OP_OP expr_list OP_CP ;
expr_list:	 expr expr_list_tail | ;
expr_list_tail:	 OP_COMMA expr expr_list_tail | ;
primary:	 OP_OP expr OP_CP | id | INTLITERAL | FLOATLITERAL ;
addop:		 OP_ADD | OP_SUB ;
mulop:		 OP_MUL | OP_DIV ;


/* Complex Statements and Condition */
if_stmt:	 KW_IF OP_OP cond OP_CP decl stmt_list else_part KW_FI ;
else_part:	 KW_ELSE decl stmt_list | ;
cond:		 expr compop expr ;
compop:		 OP_LT | OP_GT | OP_EQ | OP_NEQ | OP_LEQ | OP_GEQ ;

init_stmt:	 assign_expr | ;
incr_stmt:	 assign_expr | ;

for_stmt:	 KW_FOR OP_OP init_stmt OP_SEMICOLON cond OP_SEMICOLON incr_stmt OP_CP decl aug_stmt_list KW_ROF ;

aug_stmt_list:	 aug_stmt aug_stmt_list | ;
aug_stmt:	 base_stmt | aug_if_stmt | for_stmt | KW_CONTINUE OP_SEMICOLON | KW_BREAK OP_SEMICOLON ;

aug_if_stmt:	 KW_IF OP_OP cond OP_CP decl aug_stmt_list aug_else_part KW_FI ;
aug_else_part:	 KW_ELSE decl aug_stmt_list | ;

%%
